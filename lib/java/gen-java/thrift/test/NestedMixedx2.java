/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.test;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class NestedMixedx2 implements org.apache.thrift.TBase<NestedMixedx2, NestedMixedx2._Fields>, java.io.Serializable, Cloneable, Comparable<NestedMixedx2> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NestedMixedx2");

  private static final org.apache.thrift.protocol.TField INT_SET_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("int_set_list", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField MAP_INT_STRSET_FIELD_DESC = new org.apache.thrift.protocol.TField("map_int_strset", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField MAP_INT_STRSET_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("map_int_strset_list", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new NestedMixedx2StandardSchemeFactory());
    schemes.put(TupleScheme.class, new NestedMixedx2TupleSchemeFactory());
  }

  public List<Set<Integer>> int_set_list; // required
  public Map<Integer,Set<String>> map_int_strset; // required
  public List<Map<Integer,Set<String>>> map_int_strset_list; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INT_SET_LIST((short)1, "int_set_list"),
    MAP_INT_STRSET((short)2, "map_int_strset"),
    MAP_INT_STRSET_LIST((short)3, "map_int_strset_list");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INT_SET_LIST
          return INT_SET_LIST;
        case 2: // MAP_INT_STRSET
          return MAP_INT_STRSET;
        case 3: // MAP_INT_STRSET_LIST
          return MAP_INT_STRSET_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INT_SET_LIST, new org.apache.thrift.meta_data.FieldMetaData("int_set_list", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)))));
    tmpMap.put(_Fields.MAP_INT_STRSET, new org.apache.thrift.meta_data.FieldMetaData("map_int_strset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.MAP_INT_STRSET_LIST, new org.apache.thrift.meta_data.FieldMetaData("map_int_strset_list", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
                new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NestedMixedx2.class, metaDataMap);
  }

  public NestedMixedx2() {
  }

  public NestedMixedx2(
    List<Set<Integer>> int_set_list,
    Map<Integer,Set<String>> map_int_strset,
    List<Map<Integer,Set<String>>> map_int_strset_list)
  {
    this();
    this.int_set_list = int_set_list;
    this.map_int_strset = map_int_strset;
    this.map_int_strset_list = map_int_strset_list;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NestedMixedx2(NestedMixedx2 other) {
    if (other.isSetInt_set_list()) {
      List<Set<Integer>> __this__int_set_list = new ArrayList<Set<Integer>>(other.int_set_list.size());
      for (Set<Integer> other_element : other.int_set_list) {
        Set<Integer> __this__int_set_list_copy = new HashSet<Integer>(other_element);
        __this__int_set_list.add(__this__int_set_list_copy);
      }
      this.int_set_list = __this__int_set_list;
    }
    if (other.isSetMap_int_strset()) {
      Map<Integer,Set<String>> __this__map_int_strset = new HashMap<Integer,Set<String>>(other.map_int_strset.size());
      for (Map.Entry<Integer, Set<String>> other_element : other.map_int_strset.entrySet()) {

        Integer other_element_key = other_element.getKey();
        Set<String> other_element_value = other_element.getValue();

        Integer __this__map_int_strset_copy_key = other_element_key;

        Set<String> __this__map_int_strset_copy_value = new HashSet<String>(other_element_value);

        __this__map_int_strset.put(__this__map_int_strset_copy_key, __this__map_int_strset_copy_value);
      }
      this.map_int_strset = __this__map_int_strset;
    }
    if (other.isSetMap_int_strset_list()) {
      List<Map<Integer,Set<String>>> __this__map_int_strset_list = new ArrayList<Map<Integer,Set<String>>>(other.map_int_strset_list.size());
      for (Map<Integer,Set<String>> other_element : other.map_int_strset_list) {
        Map<Integer,Set<String>> __this__map_int_strset_list_copy = new HashMap<Integer,Set<String>>(other_element.size());
        for (Map.Entry<Integer, Set<String>> other_element_element : other_element.entrySet()) {

          Integer other_element_element_key = other_element_element.getKey();
          Set<String> other_element_element_value = other_element_element.getValue();

          Integer __this__map_int_strset_list_copy_copy_key = other_element_element_key;

          Set<String> __this__map_int_strset_list_copy_copy_value = new HashSet<String>(other_element_element_value);

          __this__map_int_strset_list_copy.put(__this__map_int_strset_list_copy_copy_key, __this__map_int_strset_list_copy_copy_value);
        }
        __this__map_int_strset_list.add(__this__map_int_strset_list_copy);
      }
      this.map_int_strset_list = __this__map_int_strset_list;
    }
  }

  public NestedMixedx2 deepCopy() {
    return new NestedMixedx2(this);
  }

  @Override
  public void clear() {
    this.int_set_list = null;
    this.map_int_strset = null;
    this.map_int_strset_list = null;
  }

  public int getInt_set_listSize() {
    return (this.int_set_list == null) ? 0 : this.int_set_list.size();
  }

  public java.util.Iterator<Set<Integer>> getInt_set_listIterator() {
    return (this.int_set_list == null) ? null : this.int_set_list.iterator();
  }

  public void addToInt_set_list(Set<Integer> elem) {
    if (this.int_set_list == null) {
      this.int_set_list = new ArrayList<Set<Integer>>();
    }
    this.int_set_list.add(elem);
  }

  public List<Set<Integer>> getInt_set_list() {
    return this.int_set_list;
  }

  public NestedMixedx2 setInt_set_list(List<Set<Integer>> int_set_list) {
    this.int_set_list = int_set_list;
    return this;
  }

  public void unsetInt_set_list() {
    this.int_set_list = null;
  }

  /** Returns true if field int_set_list is set (has been assigned a value) and false otherwise */
  public boolean isSetInt_set_list() {
    return this.int_set_list != null;
  }

  public void setInt_set_listIsSet(boolean value) {
    if (!value) {
      this.int_set_list = null;
    }
  }

  public int getMap_int_strsetSize() {
    return (this.map_int_strset == null) ? 0 : this.map_int_strset.size();
  }

  public void putToMap_int_strset(int key, Set<String> val) {
    if (this.map_int_strset == null) {
      this.map_int_strset = new HashMap<Integer,Set<String>>();
    }
    this.map_int_strset.put(key, val);
  }

  public Map<Integer,Set<String>> getMap_int_strset() {
    return this.map_int_strset;
  }

  public NestedMixedx2 setMap_int_strset(Map<Integer,Set<String>> map_int_strset) {
    this.map_int_strset = map_int_strset;
    return this;
  }

  public void unsetMap_int_strset() {
    this.map_int_strset = null;
  }

  /** Returns true if field map_int_strset is set (has been assigned a value) and false otherwise */
  public boolean isSetMap_int_strset() {
    return this.map_int_strset != null;
  }

  public void setMap_int_strsetIsSet(boolean value) {
    if (!value) {
      this.map_int_strset = null;
    }
  }

  public int getMap_int_strset_listSize() {
    return (this.map_int_strset_list == null) ? 0 : this.map_int_strset_list.size();
  }

  public java.util.Iterator<Map<Integer,Set<String>>> getMap_int_strset_listIterator() {
    return (this.map_int_strset_list == null) ? null : this.map_int_strset_list.iterator();
  }

  public void addToMap_int_strset_list(Map<Integer,Set<String>> elem) {
    if (this.map_int_strset_list == null) {
      this.map_int_strset_list = new ArrayList<Map<Integer,Set<String>>>();
    }
    this.map_int_strset_list.add(elem);
  }

  public List<Map<Integer,Set<String>>> getMap_int_strset_list() {
    return this.map_int_strset_list;
  }

  public NestedMixedx2 setMap_int_strset_list(List<Map<Integer,Set<String>>> map_int_strset_list) {
    this.map_int_strset_list = map_int_strset_list;
    return this;
  }

  public void unsetMap_int_strset_list() {
    this.map_int_strset_list = null;
  }

  /** Returns true if field map_int_strset_list is set (has been assigned a value) and false otherwise */
  public boolean isSetMap_int_strset_list() {
    return this.map_int_strset_list != null;
  }

  public void setMap_int_strset_listIsSet(boolean value) {
    if (!value) {
      this.map_int_strset_list = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INT_SET_LIST:
      if (value == null) {
        unsetInt_set_list();
      } else {
        setInt_set_list((List<Set<Integer>>)value);
      }
      break;

    case MAP_INT_STRSET:
      if (value == null) {
        unsetMap_int_strset();
      } else {
        setMap_int_strset((Map<Integer,Set<String>>)value);
      }
      break;

    case MAP_INT_STRSET_LIST:
      if (value == null) {
        unsetMap_int_strset_list();
      } else {
        setMap_int_strset_list((List<Map<Integer,Set<String>>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INT_SET_LIST:
      return getInt_set_list();

    case MAP_INT_STRSET:
      return getMap_int_strset();

    case MAP_INT_STRSET_LIST:
      return getMap_int_strset_list();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INT_SET_LIST:
      return isSetInt_set_list();
    case MAP_INT_STRSET:
      return isSetMap_int_strset();
    case MAP_INT_STRSET_LIST:
      return isSetMap_int_strset_list();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof NestedMixedx2)
      return this.equals((NestedMixedx2)that);
    return false;
  }

  public boolean equals(NestedMixedx2 that) {
    if (that == null)
      return false;

    boolean this_present_int_set_list = true && this.isSetInt_set_list();
    boolean that_present_int_set_list = true && that.isSetInt_set_list();
    if (this_present_int_set_list || that_present_int_set_list) {
      if (!(this_present_int_set_list && that_present_int_set_list))
        return false;
      if (!this.int_set_list.equals(that.int_set_list))
        return false;
    }

    boolean this_present_map_int_strset = true && this.isSetMap_int_strset();
    boolean that_present_map_int_strset = true && that.isSetMap_int_strset();
    if (this_present_map_int_strset || that_present_map_int_strset) {
      if (!(this_present_map_int_strset && that_present_map_int_strset))
        return false;
      if (!this.map_int_strset.equals(that.map_int_strset))
        return false;
    }

    boolean this_present_map_int_strset_list = true && this.isSetMap_int_strset_list();
    boolean that_present_map_int_strset_list = true && that.isSetMap_int_strset_list();
    if (this_present_map_int_strset_list || that_present_map_int_strset_list) {
      if (!(this_present_map_int_strset_list && that_present_map_int_strset_list))
        return false;
      if (!this.map_int_strset_list.equals(that.map_int_strset_list))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_int_set_list = true && (isSetInt_set_list());
    builder.append(present_int_set_list);
    if (present_int_set_list)
      builder.append(int_set_list);

    boolean present_map_int_strset = true && (isSetMap_int_strset());
    builder.append(present_map_int_strset);
    if (present_map_int_strset)
      builder.append(map_int_strset);

    boolean present_map_int_strset_list = true && (isSetMap_int_strset_list());
    builder.append(present_map_int_strset_list);
    if (present_map_int_strset_list)
      builder.append(map_int_strset_list);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(NestedMixedx2 other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetInt_set_list()).compareTo(other.isSetInt_set_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInt_set_list()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.int_set_list, other.int_set_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMap_int_strset()).compareTo(other.isSetMap_int_strset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMap_int_strset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.map_int_strset, other.map_int_strset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMap_int_strset_list()).compareTo(other.isSetMap_int_strset_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMap_int_strset_list()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.map_int_strset_list, other.map_int_strset_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("NestedMixedx2(");
    boolean first = true;

    sb.append("int_set_list:");
    if (this.int_set_list == null) {
      sb.append("null");
    } else {
      sb.append(this.int_set_list);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("map_int_strset:");
    if (this.map_int_strset == null) {
      sb.append("null");
    } else {
      sb.append(this.map_int_strset);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("map_int_strset_list:");
    if (this.map_int_strset_list == null) {
      sb.append("null");
    } else {
      sb.append(this.map_int_strset_list);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NestedMixedx2StandardSchemeFactory implements SchemeFactory {
    public NestedMixedx2StandardScheme getScheme() {
      return new NestedMixedx2StandardScheme();
    }
  }

  private static class NestedMixedx2StandardScheme extends StandardScheme<NestedMixedx2> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NestedMixedx2 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INT_SET_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list196 = iprot.readListBegin();
                struct.int_set_list = new ArrayList<Set<Integer>>(_list196.size);
                for (int _i197 = 0; _i197 < _list196.size; ++_i197)
                {
                  Set<Integer> _elem198;
                  {
                    org.apache.thrift.protocol.TSet _set199 = iprot.readSetBegin();
                    _elem198 = new HashSet<Integer>(2*_set199.size);
                    for (int _i200 = 0; _i200 < _set199.size; ++_i200)
                    {
                      int _elem201;
                      _elem201 = iprot.readI32();
                      _elem198.add(_elem201);
                    }
                    iprot.readSetEnd();
                  }
                  struct.int_set_list.add(_elem198);
                }
                iprot.readListEnd();
              }
              struct.setInt_set_listIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MAP_INT_STRSET
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map202 = iprot.readMapBegin();
                struct.map_int_strset = new HashMap<Integer,Set<String>>(2*_map202.size);
                for (int _i203 = 0; _i203 < _map202.size; ++_i203)
                {
                  int _key204;
                  Set<String> _val205;
                  _key204 = iprot.readI32();
                  {
                    org.apache.thrift.protocol.TSet _set206 = iprot.readSetBegin();
                    _val205 = new HashSet<String>(2*_set206.size);
                    for (int _i207 = 0; _i207 < _set206.size; ++_i207)
                    {
                      String _elem208;
                      _elem208 = iprot.readString();
                      _val205.add(_elem208);
                    }
                    iprot.readSetEnd();
                  }
                  struct.map_int_strset.put(_key204, _val205);
                }
                iprot.readMapEnd();
              }
              struct.setMap_int_strsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MAP_INT_STRSET_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list209 = iprot.readListBegin();
                struct.map_int_strset_list = new ArrayList<Map<Integer,Set<String>>>(_list209.size);
                for (int _i210 = 0; _i210 < _list209.size; ++_i210)
                {
                  Map<Integer,Set<String>> _elem211;
                  {
                    org.apache.thrift.protocol.TMap _map212 = iprot.readMapBegin();
                    _elem211 = new HashMap<Integer,Set<String>>(2*_map212.size);
                    for (int _i213 = 0; _i213 < _map212.size; ++_i213)
                    {
                      int _key214;
                      Set<String> _val215;
                      _key214 = iprot.readI32();
                      {
                        org.apache.thrift.protocol.TSet _set216 = iprot.readSetBegin();
                        _val215 = new HashSet<String>(2*_set216.size);
                        for (int _i217 = 0; _i217 < _set216.size; ++_i217)
                        {
                          String _elem218;
                          _elem218 = iprot.readString();
                          _val215.add(_elem218);
                        }
                        iprot.readSetEnd();
                      }
                      _elem211.put(_key214, _val215);
                    }
                    iprot.readMapEnd();
                  }
                  struct.map_int_strset_list.add(_elem211);
                }
                iprot.readListEnd();
              }
              struct.setMap_int_strset_listIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NestedMixedx2 struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.int_set_list != null) {
        oprot.writeFieldBegin(INT_SET_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.SET, struct.int_set_list.size()));
          for (Set<Integer> _iter219 : struct.int_set_list)
          {
            {
              oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, _iter219.size()));
              for (int _iter220 : _iter219)
              {
                oprot.writeI32(_iter220);
              }
              oprot.writeSetEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.map_int_strset != null) {
        oprot.writeFieldBegin(MAP_INT_STRSET_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.SET, struct.map_int_strset.size()));
          for (Map.Entry<Integer, Set<String>> _iter221 : struct.map_int_strset.entrySet())
          {
            oprot.writeI32(_iter221.getKey());
            {
              oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, _iter221.getValue().size()));
              for (String _iter222 : _iter221.getValue())
              {
                oprot.writeString(_iter222);
              }
              oprot.writeSetEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.map_int_strset_list != null) {
        oprot.writeFieldBegin(MAP_INT_STRSET_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.map_int_strset_list.size()));
          for (Map<Integer,Set<String>> _iter223 : struct.map_int_strset_list)
          {
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.SET, _iter223.size()));
              for (Map.Entry<Integer, Set<String>> _iter224 : _iter223.entrySet())
              {
                oprot.writeI32(_iter224.getKey());
                {
                  oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, _iter224.getValue().size()));
                  for (String _iter225 : _iter224.getValue())
                  {
                    oprot.writeString(_iter225);
                  }
                  oprot.writeSetEnd();
                }
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NestedMixedx2TupleSchemeFactory implements SchemeFactory {
    public NestedMixedx2TupleScheme getScheme() {
      return new NestedMixedx2TupleScheme();
    }
  }

  private static class NestedMixedx2TupleScheme extends TupleScheme<NestedMixedx2> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NestedMixedx2 struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetInt_set_list()) {
        optionals.set(0);
      }
      if (struct.isSetMap_int_strset()) {
        optionals.set(1);
      }
      if (struct.isSetMap_int_strset_list()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetInt_set_list()) {
        {
          oprot.writeI32(struct.int_set_list.size());
          for (Set<Integer> _iter226 : struct.int_set_list)
          {
            {
              oprot.writeI32(_iter226.size());
              for (int _iter227 : _iter226)
              {
                oprot.writeI32(_iter227);
              }
            }
          }
        }
      }
      if (struct.isSetMap_int_strset()) {
        {
          oprot.writeI32(struct.map_int_strset.size());
          for (Map.Entry<Integer, Set<String>> _iter228 : struct.map_int_strset.entrySet())
          {
            oprot.writeI32(_iter228.getKey());
            {
              oprot.writeI32(_iter228.getValue().size());
              for (String _iter229 : _iter228.getValue())
              {
                oprot.writeString(_iter229);
              }
            }
          }
        }
      }
      if (struct.isSetMap_int_strset_list()) {
        {
          oprot.writeI32(struct.map_int_strset_list.size());
          for (Map<Integer,Set<String>> _iter230 : struct.map_int_strset_list)
          {
            {
              oprot.writeI32(_iter230.size());
              for (Map.Entry<Integer, Set<String>> _iter231 : _iter230.entrySet())
              {
                oprot.writeI32(_iter231.getKey());
                {
                  oprot.writeI32(_iter231.getValue().size());
                  for (String _iter232 : _iter231.getValue())
                  {
                    oprot.writeString(_iter232);
                  }
                }
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NestedMixedx2 struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list233 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.SET, iprot.readI32());
          struct.int_set_list = new ArrayList<Set<Integer>>(_list233.size);
          for (int _i234 = 0; _i234 < _list233.size; ++_i234)
          {
            Set<Integer> _elem235;
            {
              org.apache.thrift.protocol.TSet _set236 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
              _elem235 = new HashSet<Integer>(2*_set236.size);
              for (int _i237 = 0; _i237 < _set236.size; ++_i237)
              {
                int _elem238;
                _elem238 = iprot.readI32();
                _elem235.add(_elem238);
              }
            }
            struct.int_set_list.add(_elem235);
          }
        }
        struct.setInt_set_listIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map239 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.SET, iprot.readI32());
          struct.map_int_strset = new HashMap<Integer,Set<String>>(2*_map239.size);
          for (int _i240 = 0; _i240 < _map239.size; ++_i240)
          {
            int _key241;
            Set<String> _val242;
            _key241 = iprot.readI32();
            {
              org.apache.thrift.protocol.TSet _set243 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _val242 = new HashSet<String>(2*_set243.size);
              for (int _i244 = 0; _i244 < _set243.size; ++_i244)
              {
                String _elem245;
                _elem245 = iprot.readString();
                _val242.add(_elem245);
              }
            }
            struct.map_int_strset.put(_key241, _val242);
          }
        }
        struct.setMap_int_strsetIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list246 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
          struct.map_int_strset_list = new ArrayList<Map<Integer,Set<String>>>(_list246.size);
          for (int _i247 = 0; _i247 < _list246.size; ++_i247)
          {
            Map<Integer,Set<String>> _elem248;
            {
              org.apache.thrift.protocol.TMap _map249 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.SET, iprot.readI32());
              _elem248 = new HashMap<Integer,Set<String>>(2*_map249.size);
              for (int _i250 = 0; _i250 < _map249.size; ++_i250)
              {
                int _key251;
                Set<String> _val252;
                _key251 = iprot.readI32();
                {
                  org.apache.thrift.protocol.TSet _set253 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                  _val252 = new HashSet<String>(2*_set253.size);
                  for (int _i254 = 0; _i254 < _set253.size; ++_i254)
                  {
                    String _elem255;
                    _elem255 = iprot.readString();
                    _val252.add(_elem255);
                  }
                }
                _elem248.put(_key251, _val252);
              }
            }
            struct.map_int_strset_list.add(_elem248);
          }
        }
        struct.setMap_int_strset_listIsSet(true);
      }
    }
  }

}

