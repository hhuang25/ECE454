/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.test;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BlowUp implements org.apache.thrift.TBase<BlowUp, BlowUp._Fields>, java.io.Serializable, Cloneable, Comparable<BlowUp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BlowUp");

  private static final org.apache.thrift.protocol.TField B1_FIELD_DESC = new org.apache.thrift.protocol.TField("b1", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField B2_FIELD_DESC = new org.apache.thrift.protocol.TField("b2", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField B3_FIELD_DESC = new org.apache.thrift.protocol.TField("b3", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField B4_FIELD_DESC = new org.apache.thrift.protocol.TField("b4", org.apache.thrift.protocol.TType.MAP, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BlowUpStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BlowUpTupleSchemeFactory());
  }

  public Map<List<Integer>,Set<Map<Integer,String>>> b1; // required
  public Map<List<Integer>,Set<Map<Integer,String>>> b2; // required
  public Map<List<Integer>,Set<Map<Integer,String>>> b3; // required
  public Map<List<Integer>,Set<Map<Integer,String>>> b4; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    B1((short)1, "b1"),
    B2((short)2, "b2"),
    B3((short)3, "b3"),
    B4((short)4, "b4");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // B1
          return B1;
        case 2: // B2
          return B2;
        case 3: // B3
          return B3;
        case 4: // B4
          return B4;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.B1, new org.apache.thrift.meta_data.FieldMetaData("b1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)), 
            new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
                new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))))));
    tmpMap.put(_Fields.B2, new org.apache.thrift.meta_data.FieldMetaData("b2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)), 
            new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
                new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))))));
    tmpMap.put(_Fields.B3, new org.apache.thrift.meta_data.FieldMetaData("b3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)), 
            new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
                new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))))));
    tmpMap.put(_Fields.B4, new org.apache.thrift.meta_data.FieldMetaData("b4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)), 
            new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
                new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BlowUp.class, metaDataMap);
  }

  public BlowUp() {
  }

  public BlowUp(
    Map<List<Integer>,Set<Map<Integer,String>>> b1,
    Map<List<Integer>,Set<Map<Integer,String>>> b2,
    Map<List<Integer>,Set<Map<Integer,String>>> b3,
    Map<List<Integer>,Set<Map<Integer,String>>> b4)
  {
    this();
    this.b1 = b1;
    this.b2 = b2;
    this.b3 = b3;
    this.b4 = b4;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BlowUp(BlowUp other) {
    if (other.isSetB1()) {
      Map<List<Integer>,Set<Map<Integer,String>>> __this__b1 = new HashMap<List<Integer>,Set<Map<Integer,String>>>(other.b1.size());
      for (Map.Entry<List<Integer>, Set<Map<Integer,String>>> other_element : other.b1.entrySet()) {

        List<Integer> other_element_key = other_element.getKey();
        Set<Map<Integer,String>> other_element_value = other_element.getValue();

        List<Integer> __this__b1_copy_key = new ArrayList<Integer>(other_element_key);

        Set<Map<Integer,String>> __this__b1_copy_value = new HashSet<Map<Integer,String>>(other_element_value.size());
        for (Map<Integer,String> other_element_value_element : other_element_value) {
          Map<Integer,String> __this__b1_copy_value_copy = new HashMap<Integer,String>(other_element_value_element);
          __this__b1_copy_value.add(__this__b1_copy_value_copy);
        }

        __this__b1.put(__this__b1_copy_key, __this__b1_copy_value);
      }
      this.b1 = __this__b1;
    }
    if (other.isSetB2()) {
      Map<List<Integer>,Set<Map<Integer,String>>> __this__b2 = new HashMap<List<Integer>,Set<Map<Integer,String>>>(other.b2.size());
      for (Map.Entry<List<Integer>, Set<Map<Integer,String>>> other_element : other.b2.entrySet()) {

        List<Integer> other_element_key = other_element.getKey();
        Set<Map<Integer,String>> other_element_value = other_element.getValue();

        List<Integer> __this__b2_copy_key = new ArrayList<Integer>(other_element_key);

        Set<Map<Integer,String>> __this__b2_copy_value = new HashSet<Map<Integer,String>>(other_element_value.size());
        for (Map<Integer,String> other_element_value_element : other_element_value) {
          Map<Integer,String> __this__b2_copy_value_copy = new HashMap<Integer,String>(other_element_value_element);
          __this__b2_copy_value.add(__this__b2_copy_value_copy);
        }

        __this__b2.put(__this__b2_copy_key, __this__b2_copy_value);
      }
      this.b2 = __this__b2;
    }
    if (other.isSetB3()) {
      Map<List<Integer>,Set<Map<Integer,String>>> __this__b3 = new HashMap<List<Integer>,Set<Map<Integer,String>>>(other.b3.size());
      for (Map.Entry<List<Integer>, Set<Map<Integer,String>>> other_element : other.b3.entrySet()) {

        List<Integer> other_element_key = other_element.getKey();
        Set<Map<Integer,String>> other_element_value = other_element.getValue();

        List<Integer> __this__b3_copy_key = new ArrayList<Integer>(other_element_key);

        Set<Map<Integer,String>> __this__b3_copy_value = new HashSet<Map<Integer,String>>(other_element_value.size());
        for (Map<Integer,String> other_element_value_element : other_element_value) {
          Map<Integer,String> __this__b3_copy_value_copy = new HashMap<Integer,String>(other_element_value_element);
          __this__b3_copy_value.add(__this__b3_copy_value_copy);
        }

        __this__b3.put(__this__b3_copy_key, __this__b3_copy_value);
      }
      this.b3 = __this__b3;
    }
    if (other.isSetB4()) {
      Map<List<Integer>,Set<Map<Integer,String>>> __this__b4 = new HashMap<List<Integer>,Set<Map<Integer,String>>>(other.b4.size());
      for (Map.Entry<List<Integer>, Set<Map<Integer,String>>> other_element : other.b4.entrySet()) {

        List<Integer> other_element_key = other_element.getKey();
        Set<Map<Integer,String>> other_element_value = other_element.getValue();

        List<Integer> __this__b4_copy_key = new ArrayList<Integer>(other_element_key);

        Set<Map<Integer,String>> __this__b4_copy_value = new HashSet<Map<Integer,String>>(other_element_value.size());
        for (Map<Integer,String> other_element_value_element : other_element_value) {
          Map<Integer,String> __this__b4_copy_value_copy = new HashMap<Integer,String>(other_element_value_element);
          __this__b4_copy_value.add(__this__b4_copy_value_copy);
        }

        __this__b4.put(__this__b4_copy_key, __this__b4_copy_value);
      }
      this.b4 = __this__b4;
    }
  }

  public BlowUp deepCopy() {
    return new BlowUp(this);
  }

  @Override
  public void clear() {
    this.b1 = null;
    this.b2 = null;
    this.b3 = null;
    this.b4 = null;
  }

  public int getB1Size() {
    return (this.b1 == null) ? 0 : this.b1.size();
  }

  public void putToB1(List<Integer> key, Set<Map<Integer,String>> val) {
    if (this.b1 == null) {
      this.b1 = new HashMap<List<Integer>,Set<Map<Integer,String>>>();
    }
    this.b1.put(key, val);
  }

  public Map<List<Integer>,Set<Map<Integer,String>>> getB1() {
    return this.b1;
  }

  public BlowUp setB1(Map<List<Integer>,Set<Map<Integer,String>>> b1) {
    this.b1 = b1;
    return this;
  }

  public void unsetB1() {
    this.b1 = null;
  }

  /** Returns true if field b1 is set (has been assigned a value) and false otherwise */
  public boolean isSetB1() {
    return this.b1 != null;
  }

  public void setB1IsSet(boolean value) {
    if (!value) {
      this.b1 = null;
    }
  }

  public int getB2Size() {
    return (this.b2 == null) ? 0 : this.b2.size();
  }

  public void putToB2(List<Integer> key, Set<Map<Integer,String>> val) {
    if (this.b2 == null) {
      this.b2 = new HashMap<List<Integer>,Set<Map<Integer,String>>>();
    }
    this.b2.put(key, val);
  }

  public Map<List<Integer>,Set<Map<Integer,String>>> getB2() {
    return this.b2;
  }

  public BlowUp setB2(Map<List<Integer>,Set<Map<Integer,String>>> b2) {
    this.b2 = b2;
    return this;
  }

  public void unsetB2() {
    this.b2 = null;
  }

  /** Returns true if field b2 is set (has been assigned a value) and false otherwise */
  public boolean isSetB2() {
    return this.b2 != null;
  }

  public void setB2IsSet(boolean value) {
    if (!value) {
      this.b2 = null;
    }
  }

  public int getB3Size() {
    return (this.b3 == null) ? 0 : this.b3.size();
  }

  public void putToB3(List<Integer> key, Set<Map<Integer,String>> val) {
    if (this.b3 == null) {
      this.b3 = new HashMap<List<Integer>,Set<Map<Integer,String>>>();
    }
    this.b3.put(key, val);
  }

  public Map<List<Integer>,Set<Map<Integer,String>>> getB3() {
    return this.b3;
  }

  public BlowUp setB3(Map<List<Integer>,Set<Map<Integer,String>>> b3) {
    this.b3 = b3;
    return this;
  }

  public void unsetB3() {
    this.b3 = null;
  }

  /** Returns true if field b3 is set (has been assigned a value) and false otherwise */
  public boolean isSetB3() {
    return this.b3 != null;
  }

  public void setB3IsSet(boolean value) {
    if (!value) {
      this.b3 = null;
    }
  }

  public int getB4Size() {
    return (this.b4 == null) ? 0 : this.b4.size();
  }

  public void putToB4(List<Integer> key, Set<Map<Integer,String>> val) {
    if (this.b4 == null) {
      this.b4 = new HashMap<List<Integer>,Set<Map<Integer,String>>>();
    }
    this.b4.put(key, val);
  }

  public Map<List<Integer>,Set<Map<Integer,String>>> getB4() {
    return this.b4;
  }

  public BlowUp setB4(Map<List<Integer>,Set<Map<Integer,String>>> b4) {
    this.b4 = b4;
    return this;
  }

  public void unsetB4() {
    this.b4 = null;
  }

  /** Returns true if field b4 is set (has been assigned a value) and false otherwise */
  public boolean isSetB4() {
    return this.b4 != null;
  }

  public void setB4IsSet(boolean value) {
    if (!value) {
      this.b4 = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case B1:
      if (value == null) {
        unsetB1();
      } else {
        setB1((Map<List<Integer>,Set<Map<Integer,String>>>)value);
      }
      break;

    case B2:
      if (value == null) {
        unsetB2();
      } else {
        setB2((Map<List<Integer>,Set<Map<Integer,String>>>)value);
      }
      break;

    case B3:
      if (value == null) {
        unsetB3();
      } else {
        setB3((Map<List<Integer>,Set<Map<Integer,String>>>)value);
      }
      break;

    case B4:
      if (value == null) {
        unsetB4();
      } else {
        setB4((Map<List<Integer>,Set<Map<Integer,String>>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case B1:
      return getB1();

    case B2:
      return getB2();

    case B3:
      return getB3();

    case B4:
      return getB4();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case B1:
      return isSetB1();
    case B2:
      return isSetB2();
    case B3:
      return isSetB3();
    case B4:
      return isSetB4();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BlowUp)
      return this.equals((BlowUp)that);
    return false;
  }

  public boolean equals(BlowUp that) {
    if (that == null)
      return false;

    boolean this_present_b1 = true && this.isSetB1();
    boolean that_present_b1 = true && that.isSetB1();
    if (this_present_b1 || that_present_b1) {
      if (!(this_present_b1 && that_present_b1))
        return false;
      if (!this.b1.equals(that.b1))
        return false;
    }

    boolean this_present_b2 = true && this.isSetB2();
    boolean that_present_b2 = true && that.isSetB2();
    if (this_present_b2 || that_present_b2) {
      if (!(this_present_b2 && that_present_b2))
        return false;
      if (!this.b2.equals(that.b2))
        return false;
    }

    boolean this_present_b3 = true && this.isSetB3();
    boolean that_present_b3 = true && that.isSetB3();
    if (this_present_b3 || that_present_b3) {
      if (!(this_present_b3 && that_present_b3))
        return false;
      if (!this.b3.equals(that.b3))
        return false;
    }

    boolean this_present_b4 = true && this.isSetB4();
    boolean that_present_b4 = true && that.isSetB4();
    if (this_present_b4 || that_present_b4) {
      if (!(this_present_b4 && that_present_b4))
        return false;
      if (!this.b4.equals(that.b4))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_b1 = true && (isSetB1());
    builder.append(present_b1);
    if (present_b1)
      builder.append(b1);

    boolean present_b2 = true && (isSetB2());
    builder.append(present_b2);
    if (present_b2)
      builder.append(b2);

    boolean present_b3 = true && (isSetB3());
    builder.append(present_b3);
    if (present_b3)
      builder.append(b3);

    boolean present_b4 = true && (isSetB4());
    builder.append(present_b4);
    if (present_b4)
      builder.append(b4);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(BlowUp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetB1()).compareTo(other.isSetB1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetB1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.b1, other.b1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetB2()).compareTo(other.isSetB2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetB2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.b2, other.b2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetB3()).compareTo(other.isSetB3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetB3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.b3, other.b3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetB4()).compareTo(other.isSetB4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetB4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.b4, other.b4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BlowUp(");
    boolean first = true;

    sb.append("b1:");
    if (this.b1 == null) {
      sb.append("null");
    } else {
      sb.append(this.b1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("b2:");
    if (this.b2 == null) {
      sb.append("null");
    } else {
      sb.append(this.b2);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("b3:");
    if (this.b3 == null) {
      sb.append("null");
    } else {
      sb.append(this.b3);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("b4:");
    if (this.b4 == null) {
      sb.append("null");
    } else {
      sb.append(this.b4);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BlowUpStandardSchemeFactory implements SchemeFactory {
    public BlowUpStandardScheme getScheme() {
      return new BlowUpStandardScheme();
    }
  }

  private static class BlowUpStandardScheme extends StandardScheme<BlowUp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BlowUp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // B1
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map510 = iprot.readMapBegin();
                struct.b1 = new HashMap<List<Integer>,Set<Map<Integer,String>>>(2*_map510.size);
                for (int _i511 = 0; _i511 < _map510.size; ++_i511)
                {
                  List<Integer> _key512;
                  Set<Map<Integer,String>> _val513;
                  {
                    org.apache.thrift.protocol.TList _list514 = iprot.readListBegin();
                    _key512 = new ArrayList<Integer>(_list514.size);
                    for (int _i515 = 0; _i515 < _list514.size; ++_i515)
                    {
                      int _elem516;
                      _elem516 = iprot.readI32();
                      _key512.add(_elem516);
                    }
                    iprot.readListEnd();
                  }
                  {
                    org.apache.thrift.protocol.TSet _set517 = iprot.readSetBegin();
                    _val513 = new HashSet<Map<Integer,String>>(2*_set517.size);
                    for (int _i518 = 0; _i518 < _set517.size; ++_i518)
                    {
                      Map<Integer,String> _elem519;
                      {
                        org.apache.thrift.protocol.TMap _map520 = iprot.readMapBegin();
                        _elem519 = new HashMap<Integer,String>(2*_map520.size);
                        for (int _i521 = 0; _i521 < _map520.size; ++_i521)
                        {
                          int _key522;
                          String _val523;
                          _key522 = iprot.readI32();
                          _val523 = iprot.readString();
                          _elem519.put(_key522, _val523);
                        }
                        iprot.readMapEnd();
                      }
                      _val513.add(_elem519);
                    }
                    iprot.readSetEnd();
                  }
                  struct.b1.put(_key512, _val513);
                }
                iprot.readMapEnd();
              }
              struct.setB1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // B2
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map524 = iprot.readMapBegin();
                struct.b2 = new HashMap<List<Integer>,Set<Map<Integer,String>>>(2*_map524.size);
                for (int _i525 = 0; _i525 < _map524.size; ++_i525)
                {
                  List<Integer> _key526;
                  Set<Map<Integer,String>> _val527;
                  {
                    org.apache.thrift.protocol.TList _list528 = iprot.readListBegin();
                    _key526 = new ArrayList<Integer>(_list528.size);
                    for (int _i529 = 0; _i529 < _list528.size; ++_i529)
                    {
                      int _elem530;
                      _elem530 = iprot.readI32();
                      _key526.add(_elem530);
                    }
                    iprot.readListEnd();
                  }
                  {
                    org.apache.thrift.protocol.TSet _set531 = iprot.readSetBegin();
                    _val527 = new HashSet<Map<Integer,String>>(2*_set531.size);
                    for (int _i532 = 0; _i532 < _set531.size; ++_i532)
                    {
                      Map<Integer,String> _elem533;
                      {
                        org.apache.thrift.protocol.TMap _map534 = iprot.readMapBegin();
                        _elem533 = new HashMap<Integer,String>(2*_map534.size);
                        for (int _i535 = 0; _i535 < _map534.size; ++_i535)
                        {
                          int _key536;
                          String _val537;
                          _key536 = iprot.readI32();
                          _val537 = iprot.readString();
                          _elem533.put(_key536, _val537);
                        }
                        iprot.readMapEnd();
                      }
                      _val527.add(_elem533);
                    }
                    iprot.readSetEnd();
                  }
                  struct.b2.put(_key526, _val527);
                }
                iprot.readMapEnd();
              }
              struct.setB2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // B3
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map538 = iprot.readMapBegin();
                struct.b3 = new HashMap<List<Integer>,Set<Map<Integer,String>>>(2*_map538.size);
                for (int _i539 = 0; _i539 < _map538.size; ++_i539)
                {
                  List<Integer> _key540;
                  Set<Map<Integer,String>> _val541;
                  {
                    org.apache.thrift.protocol.TList _list542 = iprot.readListBegin();
                    _key540 = new ArrayList<Integer>(_list542.size);
                    for (int _i543 = 0; _i543 < _list542.size; ++_i543)
                    {
                      int _elem544;
                      _elem544 = iprot.readI32();
                      _key540.add(_elem544);
                    }
                    iprot.readListEnd();
                  }
                  {
                    org.apache.thrift.protocol.TSet _set545 = iprot.readSetBegin();
                    _val541 = new HashSet<Map<Integer,String>>(2*_set545.size);
                    for (int _i546 = 0; _i546 < _set545.size; ++_i546)
                    {
                      Map<Integer,String> _elem547;
                      {
                        org.apache.thrift.protocol.TMap _map548 = iprot.readMapBegin();
                        _elem547 = new HashMap<Integer,String>(2*_map548.size);
                        for (int _i549 = 0; _i549 < _map548.size; ++_i549)
                        {
                          int _key550;
                          String _val551;
                          _key550 = iprot.readI32();
                          _val551 = iprot.readString();
                          _elem547.put(_key550, _val551);
                        }
                        iprot.readMapEnd();
                      }
                      _val541.add(_elem547);
                    }
                    iprot.readSetEnd();
                  }
                  struct.b3.put(_key540, _val541);
                }
                iprot.readMapEnd();
              }
              struct.setB3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // B4
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map552 = iprot.readMapBegin();
                struct.b4 = new HashMap<List<Integer>,Set<Map<Integer,String>>>(2*_map552.size);
                for (int _i553 = 0; _i553 < _map552.size; ++_i553)
                {
                  List<Integer> _key554;
                  Set<Map<Integer,String>> _val555;
                  {
                    org.apache.thrift.protocol.TList _list556 = iprot.readListBegin();
                    _key554 = new ArrayList<Integer>(_list556.size);
                    for (int _i557 = 0; _i557 < _list556.size; ++_i557)
                    {
                      int _elem558;
                      _elem558 = iprot.readI32();
                      _key554.add(_elem558);
                    }
                    iprot.readListEnd();
                  }
                  {
                    org.apache.thrift.protocol.TSet _set559 = iprot.readSetBegin();
                    _val555 = new HashSet<Map<Integer,String>>(2*_set559.size);
                    for (int _i560 = 0; _i560 < _set559.size; ++_i560)
                    {
                      Map<Integer,String> _elem561;
                      {
                        org.apache.thrift.protocol.TMap _map562 = iprot.readMapBegin();
                        _elem561 = new HashMap<Integer,String>(2*_map562.size);
                        for (int _i563 = 0; _i563 < _map562.size; ++_i563)
                        {
                          int _key564;
                          String _val565;
                          _key564 = iprot.readI32();
                          _val565 = iprot.readString();
                          _elem561.put(_key564, _val565);
                        }
                        iprot.readMapEnd();
                      }
                      _val555.add(_elem561);
                    }
                    iprot.readSetEnd();
                  }
                  struct.b4.put(_key554, _val555);
                }
                iprot.readMapEnd();
              }
              struct.setB4IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BlowUp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.b1 != null) {
        oprot.writeFieldBegin(B1_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.LIST, org.apache.thrift.protocol.TType.SET, struct.b1.size()));
          for (Map.Entry<List<Integer>, Set<Map<Integer,String>>> _iter566 : struct.b1.entrySet())
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, _iter566.getKey().size()));
              for (int _iter567 : _iter566.getKey())
              {
                oprot.writeI32(_iter567);
              }
              oprot.writeListEnd();
            }
            {
              oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.MAP, _iter566.getValue().size()));
              for (Map<Integer,String> _iter568 : _iter566.getValue())
              {
                {
                  oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, _iter568.size()));
                  for (Map.Entry<Integer, String> _iter569 : _iter568.entrySet())
                  {
                    oprot.writeI32(_iter569.getKey());
                    oprot.writeString(_iter569.getValue());
                  }
                  oprot.writeMapEnd();
                }
              }
              oprot.writeSetEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.b2 != null) {
        oprot.writeFieldBegin(B2_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.LIST, org.apache.thrift.protocol.TType.SET, struct.b2.size()));
          for (Map.Entry<List<Integer>, Set<Map<Integer,String>>> _iter570 : struct.b2.entrySet())
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, _iter570.getKey().size()));
              for (int _iter571 : _iter570.getKey())
              {
                oprot.writeI32(_iter571);
              }
              oprot.writeListEnd();
            }
            {
              oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.MAP, _iter570.getValue().size()));
              for (Map<Integer,String> _iter572 : _iter570.getValue())
              {
                {
                  oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, _iter572.size()));
                  for (Map.Entry<Integer, String> _iter573 : _iter572.entrySet())
                  {
                    oprot.writeI32(_iter573.getKey());
                    oprot.writeString(_iter573.getValue());
                  }
                  oprot.writeMapEnd();
                }
              }
              oprot.writeSetEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.b3 != null) {
        oprot.writeFieldBegin(B3_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.LIST, org.apache.thrift.protocol.TType.SET, struct.b3.size()));
          for (Map.Entry<List<Integer>, Set<Map<Integer,String>>> _iter574 : struct.b3.entrySet())
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, _iter574.getKey().size()));
              for (int _iter575 : _iter574.getKey())
              {
                oprot.writeI32(_iter575);
              }
              oprot.writeListEnd();
            }
            {
              oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.MAP, _iter574.getValue().size()));
              for (Map<Integer,String> _iter576 : _iter574.getValue())
              {
                {
                  oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, _iter576.size()));
                  for (Map.Entry<Integer, String> _iter577 : _iter576.entrySet())
                  {
                    oprot.writeI32(_iter577.getKey());
                    oprot.writeString(_iter577.getValue());
                  }
                  oprot.writeMapEnd();
                }
              }
              oprot.writeSetEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.b4 != null) {
        oprot.writeFieldBegin(B4_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.LIST, org.apache.thrift.protocol.TType.SET, struct.b4.size()));
          for (Map.Entry<List<Integer>, Set<Map<Integer,String>>> _iter578 : struct.b4.entrySet())
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, _iter578.getKey().size()));
              for (int _iter579 : _iter578.getKey())
              {
                oprot.writeI32(_iter579);
              }
              oprot.writeListEnd();
            }
            {
              oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.MAP, _iter578.getValue().size()));
              for (Map<Integer,String> _iter580 : _iter578.getValue())
              {
                {
                  oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, _iter580.size()));
                  for (Map.Entry<Integer, String> _iter581 : _iter580.entrySet())
                  {
                    oprot.writeI32(_iter581.getKey());
                    oprot.writeString(_iter581.getValue());
                  }
                  oprot.writeMapEnd();
                }
              }
              oprot.writeSetEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BlowUpTupleSchemeFactory implements SchemeFactory {
    public BlowUpTupleScheme getScheme() {
      return new BlowUpTupleScheme();
    }
  }

  private static class BlowUpTupleScheme extends TupleScheme<BlowUp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BlowUp struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetB1()) {
        optionals.set(0);
      }
      if (struct.isSetB2()) {
        optionals.set(1);
      }
      if (struct.isSetB3()) {
        optionals.set(2);
      }
      if (struct.isSetB4()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetB1()) {
        {
          oprot.writeI32(struct.b1.size());
          for (Map.Entry<List<Integer>, Set<Map<Integer,String>>> _iter582 : struct.b1.entrySet())
          {
            {
              oprot.writeI32(_iter582.getKey().size());
              for (int _iter583 : _iter582.getKey())
              {
                oprot.writeI32(_iter583);
              }
            }
            {
              oprot.writeI32(_iter582.getValue().size());
              for (Map<Integer,String> _iter584 : _iter582.getValue())
              {
                {
                  oprot.writeI32(_iter584.size());
                  for (Map.Entry<Integer, String> _iter585 : _iter584.entrySet())
                  {
                    oprot.writeI32(_iter585.getKey());
                    oprot.writeString(_iter585.getValue());
                  }
                }
              }
            }
          }
        }
      }
      if (struct.isSetB2()) {
        {
          oprot.writeI32(struct.b2.size());
          for (Map.Entry<List<Integer>, Set<Map<Integer,String>>> _iter586 : struct.b2.entrySet())
          {
            {
              oprot.writeI32(_iter586.getKey().size());
              for (int _iter587 : _iter586.getKey())
              {
                oprot.writeI32(_iter587);
              }
            }
            {
              oprot.writeI32(_iter586.getValue().size());
              for (Map<Integer,String> _iter588 : _iter586.getValue())
              {
                {
                  oprot.writeI32(_iter588.size());
                  for (Map.Entry<Integer, String> _iter589 : _iter588.entrySet())
                  {
                    oprot.writeI32(_iter589.getKey());
                    oprot.writeString(_iter589.getValue());
                  }
                }
              }
            }
          }
        }
      }
      if (struct.isSetB3()) {
        {
          oprot.writeI32(struct.b3.size());
          for (Map.Entry<List<Integer>, Set<Map<Integer,String>>> _iter590 : struct.b3.entrySet())
          {
            {
              oprot.writeI32(_iter590.getKey().size());
              for (int _iter591 : _iter590.getKey())
              {
                oprot.writeI32(_iter591);
              }
            }
            {
              oprot.writeI32(_iter590.getValue().size());
              for (Map<Integer,String> _iter592 : _iter590.getValue())
              {
                {
                  oprot.writeI32(_iter592.size());
                  for (Map.Entry<Integer, String> _iter593 : _iter592.entrySet())
                  {
                    oprot.writeI32(_iter593.getKey());
                    oprot.writeString(_iter593.getValue());
                  }
                }
              }
            }
          }
        }
      }
      if (struct.isSetB4()) {
        {
          oprot.writeI32(struct.b4.size());
          for (Map.Entry<List<Integer>, Set<Map<Integer,String>>> _iter594 : struct.b4.entrySet())
          {
            {
              oprot.writeI32(_iter594.getKey().size());
              for (int _iter595 : _iter594.getKey())
              {
                oprot.writeI32(_iter595);
              }
            }
            {
              oprot.writeI32(_iter594.getValue().size());
              for (Map<Integer,String> _iter596 : _iter594.getValue())
              {
                {
                  oprot.writeI32(_iter596.size());
                  for (Map.Entry<Integer, String> _iter597 : _iter596.entrySet())
                  {
                    oprot.writeI32(_iter597.getKey());
                    oprot.writeString(_iter597.getValue());
                  }
                }
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BlowUp struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map598 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.LIST, org.apache.thrift.protocol.TType.SET, iprot.readI32());
          struct.b1 = new HashMap<List<Integer>,Set<Map<Integer,String>>>(2*_map598.size);
          for (int _i599 = 0; _i599 < _map598.size; ++_i599)
          {
            List<Integer> _key600;
            Set<Map<Integer,String>> _val601;
            {
              org.apache.thrift.protocol.TList _list602 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
              _key600 = new ArrayList<Integer>(_list602.size);
              for (int _i603 = 0; _i603 < _list602.size; ++_i603)
              {
                int _elem604;
                _elem604 = iprot.readI32();
                _key600.add(_elem604);
              }
            }
            {
              org.apache.thrift.protocol.TSet _set605 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
              _val601 = new HashSet<Map<Integer,String>>(2*_set605.size);
              for (int _i606 = 0; _i606 < _set605.size; ++_i606)
              {
                Map<Integer,String> _elem607;
                {
                  org.apache.thrift.protocol.TMap _map608 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                  _elem607 = new HashMap<Integer,String>(2*_map608.size);
                  for (int _i609 = 0; _i609 < _map608.size; ++_i609)
                  {
                    int _key610;
                    String _val611;
                    _key610 = iprot.readI32();
                    _val611 = iprot.readString();
                    _elem607.put(_key610, _val611);
                  }
                }
                _val601.add(_elem607);
              }
            }
            struct.b1.put(_key600, _val601);
          }
        }
        struct.setB1IsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map612 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.LIST, org.apache.thrift.protocol.TType.SET, iprot.readI32());
          struct.b2 = new HashMap<List<Integer>,Set<Map<Integer,String>>>(2*_map612.size);
          for (int _i613 = 0; _i613 < _map612.size; ++_i613)
          {
            List<Integer> _key614;
            Set<Map<Integer,String>> _val615;
            {
              org.apache.thrift.protocol.TList _list616 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
              _key614 = new ArrayList<Integer>(_list616.size);
              for (int _i617 = 0; _i617 < _list616.size; ++_i617)
              {
                int _elem618;
                _elem618 = iprot.readI32();
                _key614.add(_elem618);
              }
            }
            {
              org.apache.thrift.protocol.TSet _set619 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
              _val615 = new HashSet<Map<Integer,String>>(2*_set619.size);
              for (int _i620 = 0; _i620 < _set619.size; ++_i620)
              {
                Map<Integer,String> _elem621;
                {
                  org.apache.thrift.protocol.TMap _map622 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                  _elem621 = new HashMap<Integer,String>(2*_map622.size);
                  for (int _i623 = 0; _i623 < _map622.size; ++_i623)
                  {
                    int _key624;
                    String _val625;
                    _key624 = iprot.readI32();
                    _val625 = iprot.readString();
                    _elem621.put(_key624, _val625);
                  }
                }
                _val615.add(_elem621);
              }
            }
            struct.b2.put(_key614, _val615);
          }
        }
        struct.setB2IsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map626 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.LIST, org.apache.thrift.protocol.TType.SET, iprot.readI32());
          struct.b3 = new HashMap<List<Integer>,Set<Map<Integer,String>>>(2*_map626.size);
          for (int _i627 = 0; _i627 < _map626.size; ++_i627)
          {
            List<Integer> _key628;
            Set<Map<Integer,String>> _val629;
            {
              org.apache.thrift.protocol.TList _list630 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
              _key628 = new ArrayList<Integer>(_list630.size);
              for (int _i631 = 0; _i631 < _list630.size; ++_i631)
              {
                int _elem632;
                _elem632 = iprot.readI32();
                _key628.add(_elem632);
              }
            }
            {
              org.apache.thrift.protocol.TSet _set633 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
              _val629 = new HashSet<Map<Integer,String>>(2*_set633.size);
              for (int _i634 = 0; _i634 < _set633.size; ++_i634)
              {
                Map<Integer,String> _elem635;
                {
                  org.apache.thrift.protocol.TMap _map636 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                  _elem635 = new HashMap<Integer,String>(2*_map636.size);
                  for (int _i637 = 0; _i637 < _map636.size; ++_i637)
                  {
                    int _key638;
                    String _val639;
                    _key638 = iprot.readI32();
                    _val639 = iprot.readString();
                    _elem635.put(_key638, _val639);
                  }
                }
                _val629.add(_elem635);
              }
            }
            struct.b3.put(_key628, _val629);
          }
        }
        struct.setB3IsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map640 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.LIST, org.apache.thrift.protocol.TType.SET, iprot.readI32());
          struct.b4 = new HashMap<List<Integer>,Set<Map<Integer,String>>>(2*_map640.size);
          for (int _i641 = 0; _i641 < _map640.size; ++_i641)
          {
            List<Integer> _key642;
            Set<Map<Integer,String>> _val643;
            {
              org.apache.thrift.protocol.TList _list644 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
              _key642 = new ArrayList<Integer>(_list644.size);
              for (int _i645 = 0; _i645 < _list644.size; ++_i645)
              {
                int _elem646;
                _elem646 = iprot.readI32();
                _key642.add(_elem646);
              }
            }
            {
              org.apache.thrift.protocol.TSet _set647 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
              _val643 = new HashSet<Map<Integer,String>>(2*_set647.size);
              for (int _i648 = 0; _i648 < _set647.size; ++_i648)
              {
                Map<Integer,String> _elem649;
                {
                  org.apache.thrift.protocol.TMap _map650 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                  _elem649 = new HashMap<Integer,String>(2*_map650.size);
                  for (int _i651 = 0; _i651 < _map650.size; ++_i651)
                  {
                    int _key652;
                    String _val653;
                    _key652 = iprot.readI32();
                    _val653 = iprot.readString();
                    _elem649.put(_key652, _val653);
                  }
                }
                _val643.add(_elem649);
              }
            }
            struct.b4.put(_key642, _val643);
          }
        }
        struct.setB4IsSet(true);
      }
    }
  }

}

