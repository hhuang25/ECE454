/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef T_TEST_THRIFT_TEST_TYPES_H
#define T_TEST_THRIFT_TEST_TYPES_H

/* base includes */
#include <glib-object.h>
#include <thrift/c_glib/thrift_struct.h>
#include <thrift/c_glib/protocol/thrift_protocol.h>

/* custom thrift includes */

/* begin types */

enum _TTestNumberz {
  T_TEST_NUMBERZ_ONE = 1,
  T_TEST_NUMBERZ_TWO = 2,
  T_TEST_NUMBERZ_THREE = 3,
  T_TEST_NUMBERZ_FIVE = 5,
  T_TEST_NUMBERZ_SIX = 6,
  T_TEST_NUMBERZ_EIGHT = 8
};
typedef enum _TTestNumberz TTestNumberz;

typedef gint64 TTestUserId;

typedef GHashTable * TTestMapType;

/* struct Bonk */
struct _TTestBonk
{ 
  ThriftStruct parent; 

  /* public */
  gchar * message;
  gboolean __isset_message;
  gint32 type;
  gboolean __isset_type;
};
typedef struct _TTestBonk TTestBonk;

struct _TTestBonkClass
{
  ThriftStructClass parent;
};
typedef struct _TTestBonkClass TTestBonkClass;

GType t_test_bonk_get_type (void);
#define T_TEST_TYPE_BONK (t_test_bonk_get_type())
#define T_TEST_BONK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_BONK, TTestBonk))
#define T_TEST_BONK_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_BONK, TTestBonkClass))
#define T_TEST_IS_BONK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_BONK))
#define T_TEST_IS_BONK_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_BONK))
#define T_TEST_BONK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_BONK, TTestBonkClass))

/* struct Bools */
struct _TTestBools
{ 
  ThriftStruct parent; 

  /* public */
  gboolean im_true;
  gboolean __isset_im_true;
  gboolean im_false;
  gboolean __isset_im_false;
};
typedef struct _TTestBools TTestBools;

struct _TTestBoolsClass
{
  ThriftStructClass parent;
};
typedef struct _TTestBoolsClass TTestBoolsClass;

GType t_test_bools_get_type (void);
#define T_TEST_TYPE_BOOLS (t_test_bools_get_type())
#define T_TEST_BOOLS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_BOOLS, TTestBools))
#define T_TEST_BOOLS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_BOOLS, TTestBoolsClass))
#define T_TEST_IS_BOOLS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_BOOLS))
#define T_TEST_IS_BOOLS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_BOOLS))
#define T_TEST_BOOLS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_BOOLS, TTestBoolsClass))

/* struct Xtruct */
struct _TTestXtruct
{ 
  ThriftStruct parent; 

  /* public */
  gchar * string_thing;
  gboolean __isset_string_thing;
  gint8 byte_thing;
  gboolean __isset_byte_thing;
  gint32 i32_thing;
  gboolean __isset_i32_thing;
  gint64 i64_thing;
  gboolean __isset_i64_thing;
};
typedef struct _TTestXtruct TTestXtruct;

struct _TTestXtructClass
{
  ThriftStructClass parent;
};
typedef struct _TTestXtructClass TTestXtructClass;

GType t_test_xtruct_get_type (void);
#define T_TEST_TYPE_XTRUCT (t_test_xtruct_get_type())
#define T_TEST_XTRUCT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_XTRUCT, TTestXtruct))
#define T_TEST_XTRUCT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_XTRUCT, TTestXtructClass))
#define T_TEST_IS_XTRUCT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_XTRUCT))
#define T_TEST_IS_XTRUCT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_XTRUCT))
#define T_TEST_XTRUCT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_XTRUCT, TTestXtructClass))

/* struct Xtruct2 */
struct _TTestXtruct2
{ 
  ThriftStruct parent; 

  /* public */
  gint8 byte_thing;
  gboolean __isset_byte_thing;
  TTestXtruct * struct_thing;
  gboolean __isset_struct_thing;
  gint32 i32_thing;
  gboolean __isset_i32_thing;
};
typedef struct _TTestXtruct2 TTestXtruct2;

struct _TTestXtruct2Class
{
  ThriftStructClass parent;
};
typedef struct _TTestXtruct2Class TTestXtruct2Class;

GType t_test_xtruct2_get_type (void);
#define T_TEST_TYPE_XTRUCT2 (t_test_xtruct2_get_type())
#define T_TEST_XTRUCT2(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_XTRUCT2, TTestXtruct2))
#define T_TEST_XTRUCT2_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_XTRUCT2, TTestXtruct2Class))
#define T_TEST_IS_XTRUCT2(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_XTRUCT2))
#define T_TEST_IS_XTRUCT2_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_XTRUCT2))
#define T_TEST_XTRUCT2_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_XTRUCT2, TTestXtruct2Class))

/* struct Xtruct3 */
struct _TTestXtruct3
{ 
  ThriftStruct parent; 

  /* public */
  gchar * string_thing;
  gboolean __isset_string_thing;
  gint32 changed;
  gboolean __isset_changed;
  gint32 i32_thing;
  gboolean __isset_i32_thing;
  gint64 i64_thing;
  gboolean __isset_i64_thing;
};
typedef struct _TTestXtruct3 TTestXtruct3;

struct _TTestXtruct3Class
{
  ThriftStructClass parent;
};
typedef struct _TTestXtruct3Class TTestXtruct3Class;

GType t_test_xtruct3_get_type (void);
#define T_TEST_TYPE_XTRUCT3 (t_test_xtruct3_get_type())
#define T_TEST_XTRUCT3(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_XTRUCT3, TTestXtruct3))
#define T_TEST_XTRUCT3_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_XTRUCT3, TTestXtruct3Class))
#define T_TEST_IS_XTRUCT3(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_XTRUCT3))
#define T_TEST_IS_XTRUCT3_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_XTRUCT3))
#define T_TEST_XTRUCT3_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_XTRUCT3, TTestXtruct3Class))

/* struct Insanity */
struct _TTestInsanity
{ 
  ThriftStruct parent; 

  /* public */
  GHashTable * userMap;
  gboolean __isset_userMap;
  GPtrArray * xtructs;
  gboolean __isset_xtructs;
};
typedef struct _TTestInsanity TTestInsanity;

struct _TTestInsanityClass
{
  ThriftStructClass parent;
};
typedef struct _TTestInsanityClass TTestInsanityClass;

GType t_test_insanity_get_type (void);
#define T_TEST_TYPE_INSANITY (t_test_insanity_get_type())
#define T_TEST_INSANITY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_INSANITY, TTestInsanity))
#define T_TEST_INSANITY_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_INSANITY, TTestInsanityClass))
#define T_TEST_IS_INSANITY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_INSANITY))
#define T_TEST_IS_INSANITY_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_INSANITY))
#define T_TEST_INSANITY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_INSANITY, TTestInsanityClass))

/* struct CrazyNesting */
struct _TTestCrazyNesting
{ 
  ThriftStruct parent; 

  /* public */
  gchar * string_field;
  gboolean __isset_string_field;
  GHashTable * set_field;
  gboolean __isset_set_field;
  GPtrArray * list_field;
  GByteArray * binary_field;
  gboolean __isset_binary_field;
};
typedef struct _TTestCrazyNesting TTestCrazyNesting;

struct _TTestCrazyNestingClass
{
  ThriftStructClass parent;
};
typedef struct _TTestCrazyNestingClass TTestCrazyNestingClass;

GType t_test_crazy_nesting_get_type (void);
#define T_TEST_TYPE_CRAZY_NESTING (t_test_crazy_nesting_get_type())
#define T_TEST_CRAZY_NESTING(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_CRAZY_NESTING, TTestCrazyNesting))
#define T_TEST_CRAZY_NESTING_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_CRAZY_NESTING, TTestCrazyNestingClass))
#define T_TEST_IS_CRAZY_NESTING(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_CRAZY_NESTING))
#define T_TEST_IS_CRAZY_NESTING_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_CRAZY_NESTING))
#define T_TEST_CRAZY_NESTING_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_CRAZY_NESTING, TTestCrazyNestingClass))

struct _TTestXception
{ 
  ThriftStruct parent; 

  /* public */
  gint32 errorCode;
  gboolean __isset_errorCode;
  gchar * message;
  gboolean __isset_message;
};
typedef struct _TTestXception TTestXception;

struct _TTestXceptionClass
{
  ThriftStructClass parent;
};
typedef struct _TTestXceptionClass TTestXceptionClass;

GType t_test_xception_get_type (void);
#define T_TEST_TYPE_XCEPTION (t_test_xception_get_type())
#define T_TEST_XCEPTION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_XCEPTION, TTestXception))
#define T_TEST_XCEPTION_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_XCEPTION, TTestXceptionClass))
#define T_TEST_IS_XCEPTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_XCEPTION))
#define T_TEST_IS_XCEPTION_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_XCEPTION))
#define T_TEST_XCEPTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_XCEPTION, TTestXceptionClass))

/* exception */
typedef enum
{
  T_TEST_XCEPTION_ERROR_CODE,
} TTestXceptionError;

GQuark t_test_xception_error_quark (void);
#define T_TEST_XCEPTION_ERROR (t_test_xception_error_quark())


struct _TTestXception2
{ 
  ThriftStruct parent; 

  /* public */
  gint32 errorCode;
  gboolean __isset_errorCode;
  TTestXtruct * struct_thing;
  gboolean __isset_struct_thing;
};
typedef struct _TTestXception2 TTestXception2;

struct _TTestXception2Class
{
  ThriftStructClass parent;
};
typedef struct _TTestXception2Class TTestXception2Class;

GType t_test_xception2_get_type (void);
#define T_TEST_TYPE_XCEPTION2 (t_test_xception2_get_type())
#define T_TEST_XCEPTION2(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_XCEPTION2, TTestXception2))
#define T_TEST_XCEPTION2_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_XCEPTION2, TTestXception2Class))
#define T_TEST_IS_XCEPTION2(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_XCEPTION2))
#define T_TEST_IS_XCEPTION2_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_XCEPTION2))
#define T_TEST_XCEPTION2_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_XCEPTION2, TTestXception2Class))

/* exception */
typedef enum
{
  T_TEST_XCEPTION2_ERROR_CODE,
} TTestXception2Error;

GQuark t_test_xception2_error_quark (void);
#define T_TEST_XCEPTION2_ERROR (t_test_xception2_error_quark())


/* struct EmptyStruct */
struct _TTestEmptyStruct
{ 
  ThriftStruct parent; 

  /* public */
};
typedef struct _TTestEmptyStruct TTestEmptyStruct;

struct _TTestEmptyStructClass
{
  ThriftStructClass parent;
};
typedef struct _TTestEmptyStructClass TTestEmptyStructClass;

GType t_test_empty_struct_get_type (void);
#define T_TEST_TYPE_EMPTY_STRUCT (t_test_empty_struct_get_type())
#define T_TEST_EMPTY_STRUCT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_EMPTY_STRUCT, TTestEmptyStruct))
#define T_TEST_EMPTY_STRUCT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_EMPTY_STRUCT, TTestEmptyStructClass))
#define T_TEST_IS_EMPTY_STRUCT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_EMPTY_STRUCT))
#define T_TEST_IS_EMPTY_STRUCT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_EMPTY_STRUCT))
#define T_TEST_EMPTY_STRUCT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_EMPTY_STRUCT, TTestEmptyStructClass))

/* struct OneField */
struct _TTestOneField
{ 
  ThriftStruct parent; 

  /* public */
  TTestEmptyStruct * field;
  gboolean __isset_field;
};
typedef struct _TTestOneField TTestOneField;

struct _TTestOneFieldClass
{
  ThriftStructClass parent;
};
typedef struct _TTestOneFieldClass TTestOneFieldClass;

GType t_test_one_field_get_type (void);
#define T_TEST_TYPE_ONE_FIELD (t_test_one_field_get_type())
#define T_TEST_ONE_FIELD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_ONE_FIELD, TTestOneField))
#define T_TEST_ONE_FIELD_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_ONE_FIELD, TTestOneFieldClass))
#define T_TEST_IS_ONE_FIELD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_ONE_FIELD))
#define T_TEST_IS_ONE_FIELD_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_ONE_FIELD))
#define T_TEST_ONE_FIELD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_ONE_FIELD, TTestOneFieldClass))

/* struct VersioningTestV1 */
struct _TTestVersioningTestV1
{ 
  ThriftStruct parent; 

  /* public */
  gint32 begin_in_both;
  gboolean __isset_begin_in_both;
  gchar * old_string;
  gboolean __isset_old_string;
  gint32 end_in_both;
  gboolean __isset_end_in_both;
};
typedef struct _TTestVersioningTestV1 TTestVersioningTestV1;

struct _TTestVersioningTestV1Class
{
  ThriftStructClass parent;
};
typedef struct _TTestVersioningTestV1Class TTestVersioningTestV1Class;

GType t_test_versioning_test_v1_get_type (void);
#define T_TEST_TYPE_VERSIONING_TEST_V1 (t_test_versioning_test_v1_get_type())
#define T_TEST_VERSIONING_TEST_V1(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_VERSIONING_TEST_V1, TTestVersioningTestV1))
#define T_TEST_VERSIONING_TEST_V1_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_VERSIONING_TEST_V1, TTestVersioningTestV1Class))
#define T_TEST_IS_VERSIONING_TEST_V1(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_VERSIONING_TEST_V1))
#define T_TEST_IS_VERSIONING_TEST_V1_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_VERSIONING_TEST_V1))
#define T_TEST_VERSIONING_TEST_V1_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_VERSIONING_TEST_V1, TTestVersioningTestV1Class))

/* struct VersioningTestV2 */
struct _TTestVersioningTestV2
{ 
  ThriftStruct parent; 

  /* public */
  gint32 begin_in_both;
  gboolean __isset_begin_in_both;
  gint32 newint;
  gboolean __isset_newint;
  gint8 newbyte;
  gboolean __isset_newbyte;
  gint16 newshort;
  gboolean __isset_newshort;
  gint64 newlong;
  gboolean __isset_newlong;
  gdouble newdouble;
  gboolean __isset_newdouble;
  TTestBonk * newstruct;
  gboolean __isset_newstruct;
  GArray * newlist;
  gboolean __isset_newlist;
  GHashTable * newset;
  gboolean __isset_newset;
  GHashTable * newmap;
  gboolean __isset_newmap;
  gchar * newstring;
  gboolean __isset_newstring;
  gint32 end_in_both;
  gboolean __isset_end_in_both;
};
typedef struct _TTestVersioningTestV2 TTestVersioningTestV2;

struct _TTestVersioningTestV2Class
{
  ThriftStructClass parent;
};
typedef struct _TTestVersioningTestV2Class TTestVersioningTestV2Class;

GType t_test_versioning_test_v2_get_type (void);
#define T_TEST_TYPE_VERSIONING_TEST_V2 (t_test_versioning_test_v2_get_type())
#define T_TEST_VERSIONING_TEST_V2(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_VERSIONING_TEST_V2, TTestVersioningTestV2))
#define T_TEST_VERSIONING_TEST_V2_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_VERSIONING_TEST_V2, TTestVersioningTestV2Class))
#define T_TEST_IS_VERSIONING_TEST_V2(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_VERSIONING_TEST_V2))
#define T_TEST_IS_VERSIONING_TEST_V2_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_VERSIONING_TEST_V2))
#define T_TEST_VERSIONING_TEST_V2_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_VERSIONING_TEST_V2, TTestVersioningTestV2Class))

/* struct ListTypeVersioningV1 */
struct _TTestListTypeVersioningV1
{ 
  ThriftStruct parent; 

  /* public */
  GArray * myints;
  gboolean __isset_myints;
  gchar * hello;
  gboolean __isset_hello;
};
typedef struct _TTestListTypeVersioningV1 TTestListTypeVersioningV1;

struct _TTestListTypeVersioningV1Class
{
  ThriftStructClass parent;
};
typedef struct _TTestListTypeVersioningV1Class TTestListTypeVersioningV1Class;

GType t_test_list_type_versioning_v1_get_type (void);
#define T_TEST_TYPE_LIST_TYPE_VERSIONING_V1 (t_test_list_type_versioning_v1_get_type())
#define T_TEST_LIST_TYPE_VERSIONING_V1(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_LIST_TYPE_VERSIONING_V1, TTestListTypeVersioningV1))
#define T_TEST_LIST_TYPE_VERSIONING_V1_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_LIST_TYPE_VERSIONING_V1, TTestListTypeVersioningV1Class))
#define T_TEST_IS_LIST_TYPE_VERSIONING_V1(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_LIST_TYPE_VERSIONING_V1))
#define T_TEST_IS_LIST_TYPE_VERSIONING_V1_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_LIST_TYPE_VERSIONING_V1))
#define T_TEST_LIST_TYPE_VERSIONING_V1_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_LIST_TYPE_VERSIONING_V1, TTestListTypeVersioningV1Class))

/* struct ListTypeVersioningV2 */
struct _TTestListTypeVersioningV2
{ 
  ThriftStruct parent; 

  /* public */
  GPtrArray * strings;
  gboolean __isset_strings;
  gchar * hello;
  gboolean __isset_hello;
};
typedef struct _TTestListTypeVersioningV2 TTestListTypeVersioningV2;

struct _TTestListTypeVersioningV2Class
{
  ThriftStructClass parent;
};
typedef struct _TTestListTypeVersioningV2Class TTestListTypeVersioningV2Class;

GType t_test_list_type_versioning_v2_get_type (void);
#define T_TEST_TYPE_LIST_TYPE_VERSIONING_V2 (t_test_list_type_versioning_v2_get_type())
#define T_TEST_LIST_TYPE_VERSIONING_V2(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_LIST_TYPE_VERSIONING_V2, TTestListTypeVersioningV2))
#define T_TEST_LIST_TYPE_VERSIONING_V2_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_LIST_TYPE_VERSIONING_V2, TTestListTypeVersioningV2Class))
#define T_TEST_IS_LIST_TYPE_VERSIONING_V2(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_LIST_TYPE_VERSIONING_V2))
#define T_TEST_IS_LIST_TYPE_VERSIONING_V2_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_LIST_TYPE_VERSIONING_V2))
#define T_TEST_LIST_TYPE_VERSIONING_V2_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_LIST_TYPE_VERSIONING_V2, TTestListTypeVersioningV2Class))

/* struct GuessProtocolStruct */
struct _TTestGuessProtocolStruct
{ 
  ThriftStruct parent; 

  /* public */
  GHashTable * map_field;
  gboolean __isset_map_field;
};
typedef struct _TTestGuessProtocolStruct TTestGuessProtocolStruct;

struct _TTestGuessProtocolStructClass
{
  ThriftStructClass parent;
};
typedef struct _TTestGuessProtocolStructClass TTestGuessProtocolStructClass;

GType t_test_guess_protocol_struct_get_type (void);
#define T_TEST_TYPE_GUESS_PROTOCOL_STRUCT (t_test_guess_protocol_struct_get_type())
#define T_TEST_GUESS_PROTOCOL_STRUCT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_GUESS_PROTOCOL_STRUCT, TTestGuessProtocolStruct))
#define T_TEST_GUESS_PROTOCOL_STRUCT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_GUESS_PROTOCOL_STRUCT, TTestGuessProtocolStructClass))
#define T_TEST_IS_GUESS_PROTOCOL_STRUCT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_GUESS_PROTOCOL_STRUCT))
#define T_TEST_IS_GUESS_PROTOCOL_STRUCT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_GUESS_PROTOCOL_STRUCT))
#define T_TEST_GUESS_PROTOCOL_STRUCT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_GUESS_PROTOCOL_STRUCT, TTestGuessProtocolStructClass))

/* struct LargeDeltas */
struct _TTestLargeDeltas
{ 
  ThriftStruct parent; 

  /* public */
  TTestBools * b1;
  gboolean __isset_b1;
  TTestBools * b10;
  gboolean __isset_b10;
  TTestBools * b100;
  gboolean __isset_b100;
  gboolean check_true;
  gboolean __isset_check_true;
  TTestBools * b1000;
  gboolean __isset_b1000;
  gboolean check_false;
  gboolean __isset_check_false;
  TTestVersioningTestV2 * vertwo2000;
  gboolean __isset_vertwo2000;
  GHashTable * a_set2500;
  gboolean __isset_a_set2500;
  TTestVersioningTestV2 * vertwo3000;
  gboolean __isset_vertwo3000;
  GArray * big_numbers;
  gboolean __isset_big_numbers;
};
typedef struct _TTestLargeDeltas TTestLargeDeltas;

struct _TTestLargeDeltasClass
{
  ThriftStructClass parent;
};
typedef struct _TTestLargeDeltasClass TTestLargeDeltasClass;

GType t_test_large_deltas_get_type (void);
#define T_TEST_TYPE_LARGE_DELTAS (t_test_large_deltas_get_type())
#define T_TEST_LARGE_DELTAS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_LARGE_DELTAS, TTestLargeDeltas))
#define T_TEST_LARGE_DELTAS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_LARGE_DELTAS, TTestLargeDeltasClass))
#define T_TEST_IS_LARGE_DELTAS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_LARGE_DELTAS))
#define T_TEST_IS_LARGE_DELTAS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_LARGE_DELTAS))
#define T_TEST_LARGE_DELTAS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_LARGE_DELTAS, TTestLargeDeltasClass))

/* struct NestedListsI32x2 */
struct _TTestNestedListsI32x2
{ 
  ThriftStruct parent; 

  /* public */
  GPtrArray * integerlist;
  gboolean __isset_integerlist;
};
typedef struct _TTestNestedListsI32x2 TTestNestedListsI32x2;

struct _TTestNestedListsI32x2Class
{
  ThriftStructClass parent;
};
typedef struct _TTestNestedListsI32x2Class TTestNestedListsI32x2Class;

GType t_test_nested_lists_i32x2_get_type (void);
#define T_TEST_TYPE_NESTED_LISTS_I32X2 (t_test_nested_lists_i32x2_get_type())
#define T_TEST_NESTED_LISTS_I32X2(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_NESTED_LISTS_I32X2, TTestNestedListsI32x2))
#define T_TEST_NESTED_LISTS_I32X2_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_NESTED_LISTS_I32X2, TTestNestedListsI32x2Class))
#define T_TEST_IS_NESTED_LISTS_I32X2(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_NESTED_LISTS_I32X2))
#define T_TEST_IS_NESTED_LISTS_I32X2_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_NESTED_LISTS_I32X2))
#define T_TEST_NESTED_LISTS_I32X2_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_NESTED_LISTS_I32X2, TTestNestedListsI32x2Class))

/* struct NestedListsI32x3 */
struct _TTestNestedListsI32x3
{ 
  ThriftStruct parent; 

  /* public */
  GPtrArray * integerlist;
  gboolean __isset_integerlist;
};
typedef struct _TTestNestedListsI32x3 TTestNestedListsI32x3;

struct _TTestNestedListsI32x3Class
{
  ThriftStructClass parent;
};
typedef struct _TTestNestedListsI32x3Class TTestNestedListsI32x3Class;

GType t_test_nested_lists_i32x3_get_type (void);
#define T_TEST_TYPE_NESTED_LISTS_I32X3 (t_test_nested_lists_i32x3_get_type())
#define T_TEST_NESTED_LISTS_I32X3(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_NESTED_LISTS_I32X3, TTestNestedListsI32x3))
#define T_TEST_NESTED_LISTS_I32X3_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_NESTED_LISTS_I32X3, TTestNestedListsI32x3Class))
#define T_TEST_IS_NESTED_LISTS_I32X3(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_NESTED_LISTS_I32X3))
#define T_TEST_IS_NESTED_LISTS_I32X3_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_NESTED_LISTS_I32X3))
#define T_TEST_NESTED_LISTS_I32X3_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_NESTED_LISTS_I32X3, TTestNestedListsI32x3Class))

/* struct NestedMixedx2 */
struct _TTestNestedMixedx2
{ 
  ThriftStruct parent; 

  /* public */
  GPtrArray * int_set_list;
  gboolean __isset_int_set_list;
  GHashTable * map_int_strset;
  gboolean __isset_map_int_strset;
  GPtrArray * map_int_strset_list;
  gboolean __isset_map_int_strset_list;
};
typedef struct _TTestNestedMixedx2 TTestNestedMixedx2;

struct _TTestNestedMixedx2Class
{
  ThriftStructClass parent;
};
typedef struct _TTestNestedMixedx2Class TTestNestedMixedx2Class;

GType t_test_nested_mixedx2_get_type (void);
#define T_TEST_TYPE_NESTED_MIXEDX2 (t_test_nested_mixedx2_get_type())
#define T_TEST_NESTED_MIXEDX2(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_NESTED_MIXEDX2, TTestNestedMixedx2))
#define T_TEST_NESTED_MIXEDX2_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_NESTED_MIXEDX2, TTestNestedMixedx2Class))
#define T_TEST_IS_NESTED_MIXEDX2(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_NESTED_MIXEDX2))
#define T_TEST_IS_NESTED_MIXEDX2_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_NESTED_MIXEDX2))
#define T_TEST_NESTED_MIXEDX2_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_NESTED_MIXEDX2, TTestNestedMixedx2Class))

/* struct ListBonks */
struct _TTestListBonks
{ 
  ThriftStruct parent; 

  /* public */
  GPtrArray * bonk;
  gboolean __isset_bonk;
};
typedef struct _TTestListBonks TTestListBonks;

struct _TTestListBonksClass
{
  ThriftStructClass parent;
};
typedef struct _TTestListBonksClass TTestListBonksClass;

GType t_test_list_bonks_get_type (void);
#define T_TEST_TYPE_LIST_BONKS (t_test_list_bonks_get_type())
#define T_TEST_LIST_BONKS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_LIST_BONKS, TTestListBonks))
#define T_TEST_LIST_BONKS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_LIST_BONKS, TTestListBonksClass))
#define T_TEST_IS_LIST_BONKS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_LIST_BONKS))
#define T_TEST_IS_LIST_BONKS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_LIST_BONKS))
#define T_TEST_LIST_BONKS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_LIST_BONKS, TTestListBonksClass))

/* struct NestedListsBonk */
struct _TTestNestedListsBonk
{ 
  ThriftStruct parent; 

  /* public */
  GPtrArray * bonk;
  gboolean __isset_bonk;
};
typedef struct _TTestNestedListsBonk TTestNestedListsBonk;

struct _TTestNestedListsBonkClass
{
  ThriftStructClass parent;
};
typedef struct _TTestNestedListsBonkClass TTestNestedListsBonkClass;

GType t_test_nested_lists_bonk_get_type (void);
#define T_TEST_TYPE_NESTED_LISTS_BONK (t_test_nested_lists_bonk_get_type())
#define T_TEST_NESTED_LISTS_BONK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_NESTED_LISTS_BONK, TTestNestedListsBonk))
#define T_TEST_NESTED_LISTS_BONK_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_NESTED_LISTS_BONK, TTestNestedListsBonkClass))
#define T_TEST_IS_NESTED_LISTS_BONK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_NESTED_LISTS_BONK))
#define T_TEST_IS_NESTED_LISTS_BONK_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_NESTED_LISTS_BONK))
#define T_TEST_NESTED_LISTS_BONK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_NESTED_LISTS_BONK, TTestNestedListsBonkClass))

/* struct BoolTest */
struct _TTestBoolTest
{ 
  ThriftStruct parent; 

  /* public */
  gboolean b;
  gboolean __isset_b;
  gchar * s;
  gboolean __isset_s;
};
typedef struct _TTestBoolTest TTestBoolTest;

struct _TTestBoolTestClass
{
  ThriftStructClass parent;
};
typedef struct _TTestBoolTestClass TTestBoolTestClass;

GType t_test_bool_test_get_type (void);
#define T_TEST_TYPE_BOOL_TEST (t_test_bool_test_get_type())
#define T_TEST_BOOL_TEST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_BOOL_TEST, TTestBoolTest))
#define T_TEST_BOOL_TEST_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_BOOL_TEST, TTestBoolTestClass))
#define T_TEST_IS_BOOL_TEST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_BOOL_TEST))
#define T_TEST_IS_BOOL_TEST_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_BOOL_TEST))
#define T_TEST_BOOL_TEST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_BOOL_TEST, TTestBoolTestClass))

/* struct StructA */
struct _TTestStructA
{ 
  ThriftStruct parent; 

  /* public */
  gchar * s;
};
typedef struct _TTestStructA TTestStructA;

struct _TTestStructAClass
{
  ThriftStructClass parent;
};
typedef struct _TTestStructAClass TTestStructAClass;

GType t_test_struct_a_get_type (void);
#define T_TEST_TYPE_STRUCT_A (t_test_struct_a_get_type())
#define T_TEST_STRUCT_A(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_STRUCT_A, TTestStructA))
#define T_TEST_STRUCT_A_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_STRUCT_A, TTestStructAClass))
#define T_TEST_IS_STRUCT_A(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_STRUCT_A))
#define T_TEST_IS_STRUCT_A_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_STRUCT_A))
#define T_TEST_STRUCT_A_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_STRUCT_A, TTestStructAClass))

/* struct StructB */
struct _TTestStructB
{ 
  ThriftStruct parent; 

  /* public */
  TTestStructA * aa;
  gboolean __isset_aa;
  TTestStructA * ab;
};
typedef struct _TTestStructB TTestStructB;

struct _TTestStructBClass
{
  ThriftStructClass parent;
};
typedef struct _TTestStructBClass TTestStructBClass;

GType t_test_struct_b_get_type (void);
#define T_TEST_TYPE_STRUCT_B (t_test_struct_b_get_type())
#define T_TEST_STRUCT_B(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_STRUCT_B, TTestStructB))
#define T_TEST_STRUCT_B_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_STRUCT_B, TTestStructBClass))
#define T_TEST_IS_STRUCT_B(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_STRUCT_B))
#define T_TEST_IS_STRUCT_B_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_STRUCT_B))
#define T_TEST_STRUCT_B_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_STRUCT_B, TTestStructBClass))

/* constants */
#define T_TEST_MYNUMBERZ (TTestNumberz)1

#endif /* T_TEST_THRIFT_TEST_TYPES_H */
